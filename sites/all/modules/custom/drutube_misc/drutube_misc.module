<?php

/**
 * Implements hook_ctools_plugin_directory().
 */
function drutube_misc_ctools_plugin_directory($module, $plugin) {
  if ($module == 'vud') {
    return $plugin;
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function drutube_misc_field_formatter_info() {
  return array(
    'drutube_misc_taxonomy_term_reference_link' => array(
      'label' => t('Drutube: Link to a Search View'),
      'field types' => array('taxonomy_term_reference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function drutube_misc_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  // Terms whose tid is 'autocreate' do not exist
  // yet and $item['taxonomy_term'] is not set. Theme such terms as
  // just their name.

  switch ($display['type']) {
    case 'drutube_misc_taxonomy_term_reference_link':
      $delta = 0;
      foreach ($items as $item) {
        if ($item['tid'] == 'autocreate') {
          $element[$delta] = array(
            '#markup' => check_plain($item['name']),
          );
          $delta++;
        } else {
           $tids[] = $item['tid'];
        }
      }
      if(empty($tids)) {
        return $element;
      }
      $terms = taxonomy_term_load_multiple($tids);
      foreach ($terms as $term) {
        $element[$delta] = array(
          '#type' => 'link',
          '#title' => $term->name,
          '#href' => 'video',
          '#options' => array('query' => array('f[0]' => $instance['field_name'].':'.$term->tid)),
          );
        $delta++;
      }
  }
  return $element;
}

/**
 * Implements hook_query_TAG_alter() for search_api_db_search for partial word search possibility.
 *
 * @see https://drupal.org/node/1299238#comment-7757405
 * @see hook_query_TAG_alter()
 */
function drutube_misc_query_search_api_db_search_alter(QueryAlterableInterface $query) {
  $to_like = function(&$conditions) use (&$to_like) {
    foreach($conditions as $i => $condition) {
      if (is_int($i)) {
        if (isset($condition['field']) && is_object($condition['field'])) {
          $sub_conditions = &$conditions[$i]['field']->conditions();
          $to_like($sub_conditions);
        }
        elseif (isset($condition['value']) && is_object($condition['value'])) {
          $sub_conditions = &$conditions[$i]['value']->conditions();
          $to_like($sub_conditions);
        }
        elseif ($conditions[$i]['operator'] != 'LIKE' && !is_object($conditions[$i]['value'])) {
          $conditions[$i]['value'] = '%' . db_like($conditions[$i]['value']) . '%';
          $conditions[$i]['operator'] = 'LIKE';
        }
      }
    }
  };
  $query->distinct();
  $tables = &$query->getTables();
  if (isset($tables['t']['table'])) {
    $conditions = &$query->conditions();
  }
  elseif (isset($tables['t']['table']) && is_object($tables['t']['table'])) {
    $conditions = &$tables['t']['table']->conditions();
  }
  if (isset($conditions)) {
    $to_like($conditions);
  }
}
